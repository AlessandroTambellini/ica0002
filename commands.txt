// SSH
- ssh -p<port_number> ubuntu@193.40.156.67
- ssh -p<my_port_number> ubuntu@193.40.156.67 uptime
- ssh-keygen -R [<public_ip>]:<port> -f /home/<your_user>/.ssh/known_hosts --> when I have problems with a key
- sudo -u backup ssh AlessandroTambellini@backup.rabix.io id --> access backup server from vm

// ANSIBLE COMMANDS
- ansible-playbook infra.yaml
- ansible-galaxy init roles/node-exporter --> create the skeleton of a role 
- ansible-vault encrypt_string <password> --> encrypt passoword with ansible_vault
- ansible-playbook infra.yaml -tmonitoring
- ansible-playbook infra.yaml -t "i, dns" --> more tags at once
- ansible-playbook infra.yaml -vvv --> see full traceback
- ansible-doc "module"

// PACKAGES
- 1) https://packages.ubuntu.com/
  2) then set the distribution to focal
- dpkg -l --> packages list

// DNS
// check the dns zone is syntattically configured correctly. If the output is OK, the syntax is correct
- named-checkzone rabix.io /var/lib/bind/db.rabix.io
- named-checkconf /etc/bind/named.conf.options // If no output, the syntax is correct
- less /etc/resolv.conf // nameserver config
- if I have problems with the dns, just set /etc/resolv.conf nameserver to 8.8.8.8 to at least download
the stuff you need 
- you could have conflicting services runnning on the same port. So you need to first manually stop these
services

// JINJA
- check Jinja2 templates: https://j2live.ttl255.com/

// TROUBLESHOOTING
- /var/log/"service"
- journalctl -fus prometheus-nginx-exporter.service --no-pager
- service bind9 status
- systemctl status bind9
- ps ax --> running processes
- cat /etc/passwd --> find out the directory of each user
- sudo mysql -e "SELECT * FROM agama.item" agama ---> if the database exists there's no output
- less /etc/apt/sources.list.d/<something>.list --> to check keys
- ansible-playbook infra.yaml -tg > stdout.txt 2> stderr.txt --> put stdout and stderr in a separate file
- git diff file --> diff from last commit

// SEARCHING/FILTERING
- cat <x> | wc -l --> count the lines
- > <path_to_file>/file --> empty the file
- telegraf config | grep -v "^#\|^$\|^  #" --> check default telegraf config (nicely)

// NETWORKING
- ss -ntlp ==> info about TCP sockets, to check the port usage by service name or service ID
- ss -nul ==> info about UDP sockets, " " "
- curl localhost:9113 | grep -v ^# ==> view page content without the comments
- dig google.com --> dns info about google.com
- ping 1.1.1.1 --> test the network is reachable
- nc -vz "ip/DNS"-2 8080 --> check if service is listening on remote machine

// STILL TO TRY
// CONFIG SYNTAX

// in my project I use template, not copy. Therefore I have jinja syntax, so
// it's gonna always give me error because is not correct config syntax
- nginx -t 
- named-checkconf
- apache2ctl -t
- nginx -t 
- named-checkzone
- visudo -cf /etc/sudoers.d/my-user <-- this is not used in this course

