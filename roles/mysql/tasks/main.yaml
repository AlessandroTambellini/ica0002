- name: prometheus-mysqld-exporter user configuration
  template:
      src: .exporter.cnf.j2
      dest: /var/lib/prometheus/.my.cnf
      mode: 0400
      owner: "{{ prometheus_user }}"
  no_log: true

- name: prometheus-mysqld-exporter args
  copy:
      src: prometheus-mysqld-exporter
      dest: /etc/default/prometheus-mysqld-exporter
  notify: Restart prometheus-mysqld-exporter

- name: Install required packages
  apt:
      name:
          - mysql-server
          - python3-pymysql
          - prometheus-mysqld-exporter

- name: MySQL exporter user
  community.mysql.mysql_user:
      name: "{{ mysql_exporter_user }}"
      password: "{{ mysql_exporter_password }}"
      priv: "*.*:PROCESS, REPLICATION CLIENT, SELECT" # privileges
      login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: true

- name: Ensure MySQL services are started
  service:
      name: "{{ item }}"
      state: started
      enabled: true
  loop:
      - mysql
      - prometheus-mysqld-exporter

# db is created after the mysql server is started because you cannot create a db if there's no DBMS active
- name: Create {{ agama_db }} database
  community.mysql.mysql_db:
      name: "{{ agama_db }}"
      login_unix_socket: /var/run/mysqld/mysqld.sock
  notify:
      - Reset MySQL source
      - Reset MySQL replica

- name: "MySQL {{ agama_user }} user"
  community.mysql.mysql_user:
      name: "{{ agama_user }}"
      password: "{{ mysql_password }}"
      host: "%"
      priv: "{{ agama_db }}.*:ALL"
      login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: true

- name: MySQL configuration
  template:
      src: override.cnf.j2
      dest: /etc/mysql/mysql.conf.d/override.cnf
  notify: Restart MySQL

#
# backup
#

- name: create {{ backup_user }} dir
  file:
      path: "/home/{{ backup_user }}/mysql"
      owner: "{{ backup_user }}"
      state: directory

- name: "{{ backup_user }} user"
  community.mysql.mysql_user:
      name: "{{ backup_user }}"
      password: "{{ backup_password }}"
      priv: "{{ agama_db }}.*:LOCK TABLES,SELECT"
      login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: true

- name: Client config
  template:
      src: .backup.cnf.j2
      dest: "/home/{{ backup_user }}/.my.cnf"
      owner: "{{ backup_user }}"
      mode: 0400
  no_log: true

- name: Cron config
  template:
      src: mysql-backup.j2
      dest: /etc/cron.d/mysql-backup

#
#
# replication
#

- name: MySQL {{ replication_user }} user
  community.mysql.mysql_user:
      name: "{{ replication_user }}"
      password: "{{ replication_password }}"
      host: "%"
      priv: "*.*:REPLICATION SLAVE"
      login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: true

- name: set read-only mode to db
  community.mysql.mysql_variables:
      variable: read_only
      value:
          "{{ 'OFF' if inventory_hostname in groups['db_primary'] else 'ON' }}"
      mode: persist # preserve the read only mode after MySQL restart
      login_unix_socket: /var/run/mysqld/mysqld.sock
  notify:
      - Reset MySQL source
      - Reset MySQL replica

#
#
# CNAME
#

- include_role:
      name: dns_record
  vars:
      dns_record:
          "mysql{{ inventory_hostname | replace('AlessandroTambellini', '') }}"
